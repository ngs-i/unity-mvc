using UnityEngine;using UnityEngine.EventSystems;using System.Collections;using System.Collections.Generic;using ApplicationConfig;public class TabBar : ViewBase {    private Dictionary<TabElementType, TabElement> _tabElements = new Dictionary<TabElementType,TabElement>();    public Dictionary<TabElementType, TabElement> tabElements    {        get { return _tabElements; }    }    void Awake()    {        Debug.Log("TabBar.Awake()");        // 直下にあるタブ要素を配列に格納        TabElement[] tabElements = GetComponentsInChildren<TabElement>();        foreach (TabElement element in tabElements)            _tabElements.Add(element.elementType, element);        //Debug.Log(tabElements.Length);    }	// Use this for initialization	void Start() {        Debug.Log("TabBar.Start()");	}		// Update is called once per frame	void Update() {		}    public void AddTabListener(TabElementType elementType, ViewClick viewClick)    {        EventTrigger trigger = tabElements[elementType].eventTrigger;        EventTrigger.Entry entry = new EventTrigger.Entry();        entry.eventID = EventTriggerType.PointerClick;        entry.callback.AddListener((eventData) => { viewClick(eventData); });        trigger.triggers.Add(entry);    }}